{
  "hints": {
    "read_state": {
      "read_only": true
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDcKcHVzaGludCAwIC8vIDAKcmV0dXJu"
  },
  "schema": {
    "local": {
      "declared": {},
      "dynamic": {}
    },
    "global": {
      "declared": {
        "auction_period": {
          "type": "uint64",
          "key": "auction_period",
          "descr": "Auction deadline block number"
        },
        "borrower_address": {
          "type": "bytes",
          "key": "borrower_address",
          "descr": "The address of the borrower"
        },
        "debt_left": {
          "type": "uint64",
          "key": "debt_left",
          "descr": "The current debt. debt_left=debt_left*((1+interset_rate)^(current_block - last_interest_update_block"
        },
        "highest_bid": {
          "type": "uint64",
          "key": "highest_bid",
          "descr": "Highest bid"
        },
        "last_interest_update_block": {
          "type": "uint64",
          "key": "last_interest_update_block",
          "descr": "starting block to compute the interest. It stores the block corresponding to the last successful invocation of pay_back"
        },
        "lender_address": {
          "type": "bytes",
          "key": "lender_address",
          "descr": "Current highest bidder"
        },
        "loan_threshold": {
          "type": "uint64",
          "key": "loan_threshold",
          "descr": "Auction starting amount"
        },
        "nft_id": {
          "type": "uint64",
          "key": "nft_id",
          "descr": "A handle to retrieve the correct NFT"
        },
        "payback_deadline": {
          "type": "uint64",
          "key": "payback_deadline",
          "descr": "Loan Deadline (initially stores the duration, the deadline is calculated after AcceptOffer is invoked"
        },
        "state": {
          "type": "uint64",
          "key": "state",
          "descr": "The current contract state"
        }
      },
      "dynamic": {}
    }
  },
  "contract": {
    "name": "BorrowMyNFT",
    "methods": [
      {
        "name": "accept_bid",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cancel_offer",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "health",
        "args": [],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "hello",
        "args": [
          {
            "type": "string",
            "name": "name"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "loan_expired",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "pay_me",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "pay_me_internal",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "provide_access_to_nft",
        "args": [
          {
            "type": "uint64",
            "name": "nft_id"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "read_state",
        "args": [],
        "returns": {
          "type": "uint64"
        },
        "desc": "Read amount of RSVP to the event. Only callable by Creator."
      },
      {
        "name": "reset_state",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_offer",
        "args": [
          {
            "type": "axfer",
            "name": "asset_xfer"
          },
          {
            "type": "uint64",
            "name": "loan_threshold"
          },
          {
            "type": "uint64",
            "name": "auction_period"
          },
          {
            "type": "uint64",
            "name": "payback_deadline"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "timeout",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ],
    "networks": {}
  }
}